ユースケース1:実行ファイルを設定する
アクター：User
事前条件：なし
起動条件：Actorがシステムに実行ファイルの設定を要求する。
基本系列
1, システムはActorに実行ファイルのパスを求める
2, Actorは実行ファイルパスを渡す
3, システムは実行ファイルパスを読み込む。
4, 読み込んだ実行ファイルを、メモリ上の特定の場所に保存し、ProgramCounterをその場所に設定する。
事後条件: メモリの適切な位置にファイル内容が格納されている。

ビジネスルール:特定の場所 = 0x10000000


ユースケース2:CPUの状態を見る
アクター:User
事前条件:なし
起動条件:Actorがシステムに要求する
基本系列
1, システムはレジスタの集合とメモリをActorに返す


ユースケース3: ステップ実行する
アクター: User
事前条件: 実行ファイルを設定している。
起動条件: 要求
基本系列:
1, システムはメモリ上から、PCの番地にある1命令を取得する(フェッチ)
2, システムは、フェッチした命令をデコードし、opcodeとoperandに分ける。
3, システムは、opcodeを参照して、operandに予め指定された処理を行う。

代替系列:
もし命令が不適切な場合、このユースケースを終了する。


--------------------------

ユースケース3-1: 命令フェッチをする。
アクター: CPU
事前条件: ステップ実行中
起動条件: なし
基本系列
1, CPUは最初の数byteを読み込み、命令長を取得する。
2, CPUは現在のPCから命令長分読み込む。
事後条件: ユースケース3-2 命令をデコードする、にInstructionが渡る

ユースケース3-2: 命令デコードをする
アクター: CPU
事前条件: 3-1が終了
起動条件: 3-1最後から連続して起動する。
基本系列
1, DecoderはInstructionから、命令の種類を判断する。
2, 命令種による場合分けを行い、InstructionのByte列を意味のあるデータに分割する(ex: Opcode, Operand)

ユースケース3-3: 命令を実行する。
アクター: CPU
事前条件: 3-2が終了
起動条件: 3-2最後から連続して起動する。
基本系列
1, CPUはデコードにより出力されたデータから、どの命令を実行するかを選択する。
2, CPUは、実行されるべき命令(Op)を処理するオブジェクトにDecode結果を渡す。
3, Opは、Decode結果を見て、レジスタやメモリからデータを取得し、処理を加えて、レジスタやメモリへデータを出力する。
    Op = (()=>Seq[Byte]) => Op => (Seq[Byte]=>())
   である？　そうとは限らない。

