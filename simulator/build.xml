<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. -->
<project basedir="." default="build" name="IS.CPUSimulator">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../../../Java/eclipse"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.6"/>
    <property name="source" value="1.6"/>
    <path id="Scala Library [2.10.2].libraryclasspath">
        <pathelement location="${ECLIPSE_HOME}/configuration/org.eclipse.osgi/bundles/700/1/.cp/lib/scala-library.jar"/>
        <pathelement location="${ECLIPSE_HOME}/configuration/org.eclipse.osgi/bundles/700/1/.cp/lib/scala-swing.jar"/>
        <pathelement location="${ECLIPSE_HOME}/configuration/org.eclipse.osgi/bundles/700/1/.cp/lib/scala-actors.jar"/>
        <pathelement location="${ECLIPSE_HOME}/configuration/org.eclipse.osgi/bundles/699/1/.cp/lib/scala-reflect.jar"/>
    </path>
    <path id="JUnit 4.libraryclasspath">
        <pathelement location="${ECLIPSE_HOME}/plugins/org.junit_4.10.0.v4_10_0_v20120426-0900/junit.jar"/>
        <pathelement location="${ECLIPSE_HOME}/plugins/org.hamcrest.core_1.1.0.v20090501071000.jar"/>
    </path>
    <path id="IS.CPUSimulator.classpath">
        <pathelement location="bin"/>
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <path refid="JUnit 4.libraryclasspath"/>
        <pathelement location="../../../../../Java/scalatest_2.10-2.0.M5b.jar"/>
        <pathelement location="../../../../../Java/jna.jar"/>
    </path>
    <path id="run.Register32bitTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.ArithmeticTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.LogicTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.ByteArrayInterpreterTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.DecoderTestSuite.simpleTest.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.ConvertFloatIntTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.ConvertFloatIntTestSuite.convertToIntFromBytes.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.test (2).bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.DecoderTestSuites.DecoderTestSuites.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.IS.CPUSimulator.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.FunctionTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.Integer32bitRegisterTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.ShiftTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.JumpTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.DecoderTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.LoadStoreTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.Integer32bitRegisterTestSuite.bytesTest.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <path id="run.AbstractCPUTestSuite.bootclasspath">
        <path refid="Scala Library [2.10.2].libraryclasspath"/>
        <fileset dir="${java.home}/lib" includes="*.jar"/>
        <fileset dir="${java.home}/lib/ext" includes="*.jar"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="Register32bitTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.Register32bitTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.Register32bitTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="ArithmeticTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.tomorrow.ver1.ArithmeticTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.ArithmeticTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="LogicTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.tomorrow.ver1.LogicTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.LogicTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="ByteArrayInterpreterTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.ByteArrayInterpreterTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.ByteArrayInterpreterTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="DecoderTestSuite.simpleTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.DecoderTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.DecoderTestSuite.simpleTest.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="ConvertFloatIntTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.ConvertFloatIntTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.ConvertFloatIntTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="ConvertFloatIntTestSuite.convertToIntFromBytes">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.ConvertFloatIntTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.ConvertFloatIntTestSuite.convertToIntFromBytes.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="test (2)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.AbstractCPUTestSuite" todir="${junit.output.dir}"/>
            <test name="test.ByteArrayInterpreterTestSuite" todir="${junit.output.dir}"/>
            <test name="test.ConvertFloatIntTestSuite" todir="${junit.output.dir}"/>
            <test name="test.DecoderTestSuite" todir="${junit.output.dir}"/>
            <test name="test.FunctionTestSuite" todir="${junit.output.dir}"/>
            <test name="test.Integer32bitRegisterTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.test (2).bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="DecoderTestSuites.DecoderTestSuites">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.DecoderTestSuites" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.DecoderTestSuites.DecoderTestSuites.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="IS.CPUSimulator">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.AbstractCPUTestSuite" todir="${junit.output.dir}"/>
            <test name="test.ByteArrayInterpreterTestSuite" todir="${junit.output.dir}"/>
            <test name="test.ConvertFloatIntTestSuite" todir="${junit.output.dir}"/>
            <test name="test.DecoderTestSuite" todir="${junit.output.dir}"/>
            <test name="test.FunctionTestSuite" todir="${junit.output.dir}"/>
            <test name="test.Integer32bitRegisterTestSuite" todir="${junit.output.dir}"/>
            <test name="test.tomorrow.ver1.ArithmeticTestSuite" todir="${junit.output.dir}"/>
            <test name="test.tomorrow.ver1.JumpTestSuite" todir="${junit.output.dir}"/>
            <test name="test.tomorrow.ver1.LoadStoreTestSuite" todir="${junit.output.dir}"/>
            <test name="test.tomorrow.ver1.LogicTestSuite" todir="${junit.output.dir}"/>
            <test name="test.tomorrow.ver1.ShiftTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.IS.CPUSimulator.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="FunctionTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.FunctionTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.FunctionTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="Integer32bitRegisterTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.Integer32bitRegisterTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.Integer32bitRegisterTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="ShiftTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.tomorrow.ver1.ShiftTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.ShiftTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="JumpTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.tomorrow.ver1.JumpTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.JumpTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="DecoderTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.DecoderTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.DecoderTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="LoadStoreTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.tomorrow.ver1.LoadStoreTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.LoadStoreTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="Integer32bitRegisterTestSuite.bytesTest">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.Integer32bitRegisterTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.Integer32bitRegisterTestSuite.bytesTest.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="AbstractCPUTestSuite">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="test.AbstractCPUTestSuite" todir="${junit.output.dir}"/>
            <classpath refid="IS.CPUSimulator.classpath"/>
            <bootclasspath>
                <path refid="run.AbstractCPUTestSuite.bootclasspath"/>
            </bootclasspath>
        </junit>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
</project>
